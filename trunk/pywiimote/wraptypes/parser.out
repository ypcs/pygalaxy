

Unused terminals:

   ELIF
   DEC_OP
   ERROR
   INCLUDE_NEXT
   IF
   LINE
   HEADER_NAME
   DEFINED
   NEWLINE
   CHARACTER_CONSTANT
   PTR_OP
   ELLIPSIS
   DEFINE
   UNDEF
   PERIOD
   ELSE
   OTHER
   PRAGMA
   ENDIF
   INCLUDE
   HASH_HASH
   STRING_LITERAL
   IMPORT
   IFDEF
   IFNDEF
   INC_OP

Grammar

Rule 1     constant_expression -> conditional_expression
Rule 2     constant -> PP_NUMBER
Rule 3     identifier -> IDENTIFIER
Rule 4     primary_expression -> constant
Rule 5     primary_expression -> identifier
Rule 6     primary_expression -> ( expression )
Rule 7     primary_expression -> LPAREN expression )
Rule 8     postfix_expression -> primary_expression
Rule 9     unary_expression -> postfix_expression
Rule 10    unary_expression -> unary_operator cast_expression
Rule 11    unary_operator -> +
Rule 12    unary_operator -> -
Rule 13    unary_operator -> ~
Rule 14    unary_operator -> !
Rule 15    cast_expression -> unary_expression
Rule 16    multiplicative_expression -> cast_expression
Rule 17    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 18    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 19    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 20    additive_expression -> multiplicative_expression
Rule 21    additive_expression -> additive_expression + multiplicative_expression
Rule 22    additive_expression -> additive_expression - multiplicative_expression
Rule 23    shift_expression -> additive_expression
Rule 24    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 25    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 26    relational_expression -> shift_expression
Rule 27    relational_expression -> relational_expression < shift_expression
Rule 28    relational_expression -> relational_expression > shift_expression
Rule 29    relational_expression -> relational_expression LE_OP shift_expression
Rule 30    relational_expression -> relational_expression GE_OP shift_expression
Rule 31    equality_expression -> relational_expression
Rule 32    equality_expression -> equality_expression EQ_OP relational_expression
Rule 33    equality_expression -> equality_expression NE_OP relational_expression
Rule 34    and_expression -> equality_expression
Rule 35    and_expression -> and_expression & equality_expression
Rule 36    exclusive_or_expression -> and_expression
Rule 37    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 38    inclusive_or_expression -> exclusive_or_expression
Rule 39    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 40    logical_and_expression -> inclusive_or_expression
Rule 41    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 42    logical_or_expression -> logical_and_expression
Rule 43    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 44    conditional_expression -> logical_or_expression
Rule 45    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 46    assignment_expression -> conditional_expression
Rule 47    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 48    assignment_operator -> =
Rule 49    assignment_operator -> MUL_ASSIGN
Rule 50    assignment_operator -> DIV_ASSIGN
Rule 51    assignment_operator -> MOD_ASSIGN
Rule 52    assignment_operator -> ADD_ASSIGN
Rule 53    assignment_operator -> SUB_ASSIGN
Rule 54    assignment_operator -> LEFT_ASSIGN
Rule 55    assignment_operator -> RIGHT_ASSIGN
Rule 56    assignment_operator -> AND_ASSIGN
Rule 57    assignment_operator -> XOR_ASSIGN
Rule 58    assignment_operator -> OR_ASSIGN
Rule 59    expression -> assignment_expression
Rule 60    expression -> expression , assignment_expression

Terminals, with rules where they appear

!                    : 14
%                    : 19
&                    : 35
(                    : 6
)                    : 6 7
*                    : 17
+                    : 11 21
,                    : 60
-                    : 12 22
/                    : 18
:                    : 45
<                    : 27
=                    : 48
>                    : 28
?                    : 45
ADD_ASSIGN           : 52
AND_ASSIGN           : 56
AND_OP               : 41
CHARACTER_CONSTANT   : 
DEC_OP               : 
DEFINE               : 
DEFINED              : 
DIV_ASSIGN           : 50
ELIF                 : 
ELLIPSIS             : 
ELSE                 : 
ENDIF                : 
EQ_OP                : 32
ERROR                : 
GE_OP                : 30
HASH_HASH            : 
HEADER_NAME          : 
IDENTIFIER           : 3
IF                   : 
IFDEF                : 
IFNDEF               : 
IMPORT               : 
INCLUDE              : 
INCLUDE_NEXT         : 
INC_OP               : 
LEFT_ASSIGN          : 54
LEFT_OP              : 24
LE_OP                : 29
LINE                 : 
LPAREN               : 7
MOD_ASSIGN           : 51
MUL_ASSIGN           : 49
NEWLINE              : 
NE_OP                : 33
OR_ASSIGN            : 58
OR_OP                : 43
OTHER                : 
PERIOD               : 
PP_NUMBER            : 2
PRAGMA               : 
PTR_OP               : 
RIGHT_ASSIGN         : 55
RIGHT_OP             : 25
STRING_LITERAL       : 
SUB_ASSIGN           : 53
UNDEF                : 
XOR_ASSIGN           : 57
^                    : 37
error                : 
|                    : 39
~                    : 13

Nonterminals, with rules where they appear

additive_expression  : 21 22 23 24 25
and_expression       : 35 36 37
assignment_expression : 47 59 60
assignment_operator  : 47
cast_expression      : 10 16 17 18 19
conditional_expression : 1 45 46
constant             : 4
constant_expression  : 0
equality_expression  : 32 33 34 35
exclusive_or_expression : 37 38 39
expression           : 6 7 45 60
identifier           : 5
inclusive_or_expression : 39 40 41
logical_and_expression : 41 42 43
logical_or_expression : 43 44 45
multiplicative_expression : 17 18 19 20 21 22
postfix_expression   : 9
primary_expression   : 8
relational_expression : 27 28 29 30 31 32 33
shift_expression     : 24 25 26 27 28 29 30
unary_expression     : 15 47
unary_operator       : 10


Parsing method: LALR


state 0

    (0) S' -> . constant_expression
    (1) constant_expression -> . conditional_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    identifier                     shift and go to state 26
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    equality_expression            shift and go to state 21
    and_expression                 shift and go to state 4
    unary_operator                 shift and go to state 12
    conditional_expression         shift and go to state 25
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    primary_expression             shift and go to state 17
    logical_or_expression          shift and go to state 24
    constant_expression            shift and go to state 14
    relational_expression          shift and go to state 10

state 1

    (4) primary_expression -> constant .

    *               reduce using rule 4 (primary_expression -> constant .)
    /               reduce using rule 4 (primary_expression -> constant .)
    %               reduce using rule 4 (primary_expression -> constant .)
    +               reduce using rule 4 (primary_expression -> constant .)
    -               reduce using rule 4 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 4 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> constant .)
    <               reduce using rule 4 (primary_expression -> constant .)
    >               reduce using rule 4 (primary_expression -> constant .)
    LE_OP           reduce using rule 4 (primary_expression -> constant .)
    GE_OP           reduce using rule 4 (primary_expression -> constant .)
    EQ_OP           reduce using rule 4 (primary_expression -> constant .)
    NE_OP           reduce using rule 4 (primary_expression -> constant .)
    &               reduce using rule 4 (primary_expression -> constant .)
    ^               reduce using rule 4 (primary_expression -> constant .)
    |               reduce using rule 4 (primary_expression -> constant .)
    AND_OP          reduce using rule 4 (primary_expression -> constant .)
    ?               reduce using rule 4 (primary_expression -> constant .)
    OR_OP           reduce using rule 4 (primary_expression -> constant .)
    $end            reduce using rule 4 (primary_expression -> constant .)
    )               reduce using rule 4 (primary_expression -> constant .)
    ,               reduce using rule 4 (primary_expression -> constant .)
    :               reduce using rule 4 (primary_expression -> constant .)
    =               reduce using rule 4 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> constant .)



state 2

    (15) cast_expression -> unary_expression .

    *               reduce using rule 15 (cast_expression -> unary_expression .)
    /               reduce using rule 15 (cast_expression -> unary_expression .)
    %               reduce using rule 15 (cast_expression -> unary_expression .)
    +               reduce using rule 15 (cast_expression -> unary_expression .)
    -               reduce using rule 15 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 15 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 15 (cast_expression -> unary_expression .)
    <               reduce using rule 15 (cast_expression -> unary_expression .)
    >               reduce using rule 15 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    &               reduce using rule 15 (cast_expression -> unary_expression .)
    ^               reduce using rule 15 (cast_expression -> unary_expression .)
    |               reduce using rule 15 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 15 (cast_expression -> unary_expression .)
    ?               reduce using rule 15 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    $end            reduce using rule 15 (cast_expression -> unary_expression .)
    )               reduce using rule 15 (cast_expression -> unary_expression .)
    ,               reduce using rule 15 (cast_expression -> unary_expression .)
    :               reduce using rule 15 (cast_expression -> unary_expression .)
    =               reduce using rule 15 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 15 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 15 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 15 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 15 (cast_expression -> unary_expression .)



state 3

    (38) inclusive_or_expression -> exclusive_or_expression .
    (37) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 38 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 28



state 4

    (36) exclusive_or_expression -> and_expression .
    (35) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 36 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 36 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 36 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 36 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 29



state 5

    (14) unary_operator -> ! .

    +               reduce using rule 14 (unary_operator -> ! .)
    -               reduce using rule 14 (unary_operator -> ! .)
    ~               reduce using rule 14 (unary_operator -> ! .)
    !               reduce using rule 14 (unary_operator -> ! .)
    (               reduce using rule 14 (unary_operator -> ! .)
    LPAREN          reduce using rule 14 (unary_operator -> ! .)
    PP_NUMBER       reduce using rule 14 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 14 (unary_operator -> ! .)



state 6

    (40) logical_and_expression -> inclusive_or_expression .
    (39) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 40 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 30



state 7

    (6) primary_expression -> ( . expression )
    (59) expression -> . assignment_expression
    (60) expression -> . expression , assignment_expression
    (46) assignment_expression -> . conditional_expression
    (47) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    relational_expression          shift and go to state 10
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 32
    unary_expression               shift and go to state 31
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    additive_expression            shift and go to state 16
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    and_expression                 shift and go to state 4
    equality_expression            shift and go to state 21
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    identifier                     shift and go to state 26
    expression                     shift and go to state 34
    logical_or_expression          shift and go to state 24
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 8

    (11) unary_operator -> + .

    +               reduce using rule 11 (unary_operator -> + .)
    -               reduce using rule 11 (unary_operator -> + .)
    ~               reduce using rule 11 (unary_operator -> + .)
    !               reduce using rule 11 (unary_operator -> + .)
    (               reduce using rule 11 (unary_operator -> + .)
    LPAREN          reduce using rule 11 (unary_operator -> + .)
    PP_NUMBER       reduce using rule 11 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 11 (unary_operator -> + .)



state 9

    (12) unary_operator -> - .

    +               reduce using rule 12 (unary_operator -> - .)
    -               reduce using rule 12 (unary_operator -> - .)
    ~               reduce using rule 12 (unary_operator -> - .)
    !               reduce using rule 12 (unary_operator -> - .)
    (               reduce using rule 12 (unary_operator -> - .)
    LPAREN          reduce using rule 12 (unary_operator -> - .)
    PP_NUMBER       reduce using rule 12 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 12 (unary_operator -> - .)



state 10

    (31) equality_expression -> relational_expression .
    (27) relational_expression -> relational_expression . < shift_expression
    (28) relational_expression -> relational_expression . > shift_expression
    (29) relational_expression -> relational_expression . LE_OP shift_expression
    (30) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 31 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 31 (equality_expression -> relational_expression .)
    &               reduce using rule 31 (equality_expression -> relational_expression .)
    ^               reduce using rule 31 (equality_expression -> relational_expression .)
    |               reduce using rule 31 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 31 (equality_expression -> relational_expression .)
    ?               reduce using rule 31 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 31 (equality_expression -> relational_expression .)
    $end            reduce using rule 31 (equality_expression -> relational_expression .)
    )               reduce using rule 31 (equality_expression -> relational_expression .)
    ,               reduce using rule 31 (equality_expression -> relational_expression .)
    :               reduce using rule 31 (equality_expression -> relational_expression .)
    <               shift and go to state 36
    >               shift and go to state 38
    LE_OP           shift and go to state 35
    GE_OP           shift and go to state 37



state 11

    (2) constant -> PP_NUMBER .

    *               reduce using rule 2 (constant -> PP_NUMBER .)
    /               reduce using rule 2 (constant -> PP_NUMBER .)
    %               reduce using rule 2 (constant -> PP_NUMBER .)
    +               reduce using rule 2 (constant -> PP_NUMBER .)
    -               reduce using rule 2 (constant -> PP_NUMBER .)
    LEFT_OP         reduce using rule 2 (constant -> PP_NUMBER .)
    RIGHT_OP        reduce using rule 2 (constant -> PP_NUMBER .)
    <               reduce using rule 2 (constant -> PP_NUMBER .)
    >               reduce using rule 2 (constant -> PP_NUMBER .)
    LE_OP           reduce using rule 2 (constant -> PP_NUMBER .)
    GE_OP           reduce using rule 2 (constant -> PP_NUMBER .)
    EQ_OP           reduce using rule 2 (constant -> PP_NUMBER .)
    NE_OP           reduce using rule 2 (constant -> PP_NUMBER .)
    &               reduce using rule 2 (constant -> PP_NUMBER .)
    ^               reduce using rule 2 (constant -> PP_NUMBER .)
    |               reduce using rule 2 (constant -> PP_NUMBER .)
    AND_OP          reduce using rule 2 (constant -> PP_NUMBER .)
    ?               reduce using rule 2 (constant -> PP_NUMBER .)
    OR_OP           reduce using rule 2 (constant -> PP_NUMBER .)
    $end            reduce using rule 2 (constant -> PP_NUMBER .)
    )               reduce using rule 2 (constant -> PP_NUMBER .)
    ,               reduce using rule 2 (constant -> PP_NUMBER .)
    :               reduce using rule 2 (constant -> PP_NUMBER .)
    =               reduce using rule 2 (constant -> PP_NUMBER .)
    MUL_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    DIV_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    MOD_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    ADD_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    SUB_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    LEFT_ASSIGN     reduce using rule 2 (constant -> PP_NUMBER .)
    RIGHT_ASSIGN    reduce using rule 2 (constant -> PP_NUMBER .)
    AND_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    XOR_ASSIGN      reduce using rule 2 (constant -> PP_NUMBER .)
    OR_ASSIGN       reduce using rule 2 (constant -> PP_NUMBER .)



state 12

    (10) unary_expression -> unary_operator . cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 17
    cast_expression                shift and go to state 39
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12

state 13

    (16) multiplicative_expression -> cast_expression .

    *               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 16 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 16 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    $end            reduce using rule 16 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 16 (multiplicative_expression -> cast_expression .)



state 14

    (0) S' -> constant_expression .




state 15

    (20) additive_expression -> multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . * cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 20 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 20 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 20 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 20 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 20 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 20 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 20 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 20 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 20 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 20 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 40
    /               shift and go to state 42
    %               shift and go to state 41



state 16

    (23) shift_expression -> additive_expression .
    (21) additive_expression -> additive_expression . + multiplicative_expression
    (22) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 23 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 23 (shift_expression -> additive_expression .)
    <               reduce using rule 23 (shift_expression -> additive_expression .)
    >               reduce using rule 23 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 23 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 23 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 23 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 23 (shift_expression -> additive_expression .)
    &               reduce using rule 23 (shift_expression -> additive_expression .)
    ^               reduce using rule 23 (shift_expression -> additive_expression .)
    |               reduce using rule 23 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 23 (shift_expression -> additive_expression .)
    ?               reduce using rule 23 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 23 (shift_expression -> additive_expression .)
    $end            reduce using rule 23 (shift_expression -> additive_expression .)
    )               reduce using rule 23 (shift_expression -> additive_expression .)
    ,               reduce using rule 23 (shift_expression -> additive_expression .)
    :               reduce using rule 23 (shift_expression -> additive_expression .)
    +               shift and go to state 43
    -               shift and go to state 44



state 17

    (8) postfix_expression -> primary_expression .

    *               reduce using rule 8 (postfix_expression -> primary_expression .)
    /               reduce using rule 8 (postfix_expression -> primary_expression .)
    %               reduce using rule 8 (postfix_expression -> primary_expression .)
    +               reduce using rule 8 (postfix_expression -> primary_expression .)
    -               reduce using rule 8 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 8 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 8 (postfix_expression -> primary_expression .)
    <               reduce using rule 8 (postfix_expression -> primary_expression .)
    >               reduce using rule 8 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 8 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 8 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 8 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 8 (postfix_expression -> primary_expression .)
    &               reduce using rule 8 (postfix_expression -> primary_expression .)
    ^               reduce using rule 8 (postfix_expression -> primary_expression .)
    |               reduce using rule 8 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 8 (postfix_expression -> primary_expression .)
    ?               reduce using rule 8 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 8 (postfix_expression -> primary_expression .)
    $end            reduce using rule 8 (postfix_expression -> primary_expression .)
    )               reduce using rule 8 (postfix_expression -> primary_expression .)
    ,               reduce using rule 8 (postfix_expression -> primary_expression .)
    :               reduce using rule 8 (postfix_expression -> primary_expression .)
    =               reduce using rule 8 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 8 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 8 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 8 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 8 (postfix_expression -> primary_expression .)



state 18

    (7) primary_expression -> LPAREN . expression )
    (59) expression -> . assignment_expression
    (60) expression -> . expression , assignment_expression
    (46) assignment_expression -> . conditional_expression
    (47) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    relational_expression          shift and go to state 10
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 32
    unary_expression               shift and go to state 31
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    additive_expression            shift and go to state 16
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    and_expression                 shift and go to state 4
    equality_expression            shift and go to state 21
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    identifier                     shift and go to state 26
    expression                     shift and go to state 45
    logical_or_expression          shift and go to state 24
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 19

    (42) logical_or_expression -> logical_and_expression .
    (41) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 46



state 20

    (26) relational_expression -> shift_expression .
    (24) shift_expression -> shift_expression . LEFT_OP additive_expression
    (25) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 26 (relational_expression -> shift_expression .)
    >               reduce using rule 26 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 26 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 26 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 26 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 26 (relational_expression -> shift_expression .)
    &               reduce using rule 26 (relational_expression -> shift_expression .)
    ^               reduce using rule 26 (relational_expression -> shift_expression .)
    |               reduce using rule 26 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 26 (relational_expression -> shift_expression .)
    ?               reduce using rule 26 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 26 (relational_expression -> shift_expression .)
    $end            reduce using rule 26 (relational_expression -> shift_expression .)
    )               reduce using rule 26 (relational_expression -> shift_expression .)
    ,               reduce using rule 26 (relational_expression -> shift_expression .)
    :               reduce using rule 26 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 47
    RIGHT_OP        shift and go to state 48



state 21

    (34) and_expression -> equality_expression .
    (32) equality_expression -> equality_expression . EQ_OP relational_expression
    (33) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 34 (and_expression -> equality_expression .)
    ^               reduce using rule 34 (and_expression -> equality_expression .)
    |               reduce using rule 34 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 34 (and_expression -> equality_expression .)
    ?               reduce using rule 34 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 34 (and_expression -> equality_expression .)
    $end            reduce using rule 34 (and_expression -> equality_expression .)
    )               reduce using rule 34 (and_expression -> equality_expression .)
    ,               reduce using rule 34 (and_expression -> equality_expression .)
    :               reduce using rule 34 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 50
    NE_OP           shift and go to state 49



state 22

    (3) identifier -> IDENTIFIER .

    *               reduce using rule 3 (identifier -> IDENTIFIER .)
    /               reduce using rule 3 (identifier -> IDENTIFIER .)
    %               reduce using rule 3 (identifier -> IDENTIFIER .)
    +               reduce using rule 3 (identifier -> IDENTIFIER .)
    -               reduce using rule 3 (identifier -> IDENTIFIER .)
    LEFT_OP         reduce using rule 3 (identifier -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 3 (identifier -> IDENTIFIER .)
    <               reduce using rule 3 (identifier -> IDENTIFIER .)
    >               reduce using rule 3 (identifier -> IDENTIFIER .)
    LE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    GE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    EQ_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    NE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    &               reduce using rule 3 (identifier -> IDENTIFIER .)
    ^               reduce using rule 3 (identifier -> IDENTIFIER .)
    |               reduce using rule 3 (identifier -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (identifier -> IDENTIFIER .)
    ?               reduce using rule 3 (identifier -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    $end            reduce using rule 3 (identifier -> IDENTIFIER .)
    )               reduce using rule 3 (identifier -> IDENTIFIER .)
    ,               reduce using rule 3 (identifier -> IDENTIFIER .)
    :               reduce using rule 3 (identifier -> IDENTIFIER .)
    =               reduce using rule 3 (identifier -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 3 (identifier -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 3 (identifier -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 3 (identifier -> IDENTIFIER .)



state 23

    (9) unary_expression -> postfix_expression .

    *               reduce using rule 9 (unary_expression -> postfix_expression .)
    /               reduce using rule 9 (unary_expression -> postfix_expression .)
    %               reduce using rule 9 (unary_expression -> postfix_expression .)
    +               reduce using rule 9 (unary_expression -> postfix_expression .)
    -               reduce using rule 9 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 9 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 9 (unary_expression -> postfix_expression .)
    <               reduce using rule 9 (unary_expression -> postfix_expression .)
    >               reduce using rule 9 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 9 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 9 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 9 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 9 (unary_expression -> postfix_expression .)
    &               reduce using rule 9 (unary_expression -> postfix_expression .)
    ^               reduce using rule 9 (unary_expression -> postfix_expression .)
    |               reduce using rule 9 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 9 (unary_expression -> postfix_expression .)
    ?               reduce using rule 9 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 9 (unary_expression -> postfix_expression .)
    $end            reduce using rule 9 (unary_expression -> postfix_expression .)
    )               reduce using rule 9 (unary_expression -> postfix_expression .)
    ,               reduce using rule 9 (unary_expression -> postfix_expression .)
    :               reduce using rule 9 (unary_expression -> postfix_expression .)
    =               reduce using rule 9 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 9 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 9 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 9 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 9 (unary_expression -> postfix_expression .)



state 24

    (44) conditional_expression -> logical_or_expression .
    (45) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (43) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    $end            reduce using rule 44 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 44 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 44 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 44 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 52
    OR_OP           shift and go to state 51



state 25

    (1) constant_expression -> conditional_expression .

    $end            reduce using rule 1 (constant_expression -> conditional_expression .)



state 26

    (5) primary_expression -> identifier .

    *               reduce using rule 5 (primary_expression -> identifier .)
    /               reduce using rule 5 (primary_expression -> identifier .)
    %               reduce using rule 5 (primary_expression -> identifier .)
    +               reduce using rule 5 (primary_expression -> identifier .)
    -               reduce using rule 5 (primary_expression -> identifier .)
    LEFT_OP         reduce using rule 5 (primary_expression -> identifier .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> identifier .)
    <               reduce using rule 5 (primary_expression -> identifier .)
    >               reduce using rule 5 (primary_expression -> identifier .)
    LE_OP           reduce using rule 5 (primary_expression -> identifier .)
    GE_OP           reduce using rule 5 (primary_expression -> identifier .)
    EQ_OP           reduce using rule 5 (primary_expression -> identifier .)
    NE_OP           reduce using rule 5 (primary_expression -> identifier .)
    &               reduce using rule 5 (primary_expression -> identifier .)
    ^               reduce using rule 5 (primary_expression -> identifier .)
    |               reduce using rule 5 (primary_expression -> identifier .)
    AND_OP          reduce using rule 5 (primary_expression -> identifier .)
    ?               reduce using rule 5 (primary_expression -> identifier .)
    OR_OP           reduce using rule 5 (primary_expression -> identifier .)
    $end            reduce using rule 5 (primary_expression -> identifier .)
    )               reduce using rule 5 (primary_expression -> identifier .)
    ,               reduce using rule 5 (primary_expression -> identifier .)
    :               reduce using rule 5 (primary_expression -> identifier .)
    =               reduce using rule 5 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> identifier .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> identifier .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> identifier .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> identifier .)



state 27

    (13) unary_operator -> ~ .

    +               reduce using rule 13 (unary_operator -> ~ .)
    -               reduce using rule 13 (unary_operator -> ~ .)
    ~               reduce using rule 13 (unary_operator -> ~ .)
    !               reduce using rule 13 (unary_operator -> ~ .)
    (               reduce using rule 13 (unary_operator -> ~ .)
    LPAREN          reduce using rule 13 (unary_operator -> ~ .)
    PP_NUMBER       reduce using rule 13 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 13 (unary_operator -> ~ .)



state 28

    (37) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    and_expression                 shift and go to state 53
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    equality_expression            shift and go to state 21
    primary_expression             shift and go to state 17
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    relational_expression          shift and go to state 10

state 29

    (35) and_expression -> and_expression & . equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    equality_expression            shift and go to state 54
    primary_expression             shift and go to state 17
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    relational_expression          shift and go to state 10

state 30

    (39) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    exclusive_or_expression        shift and go to state 55
    postfix_expression             shift and go to state 23
    additive_expression            shift and go to state 16
    and_expression                 shift and go to state 4
    primary_expression             shift and go to state 17
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    equality_expression            shift and go to state 21
    relational_expression          shift and go to state 10

state 31

    (47) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (15) cast_expression -> unary_expression .
    (48) assignment_operator -> . =
    (49) assignment_operator -> . MUL_ASSIGN
    (50) assignment_operator -> . DIV_ASSIGN
    (51) assignment_operator -> . MOD_ASSIGN
    (52) assignment_operator -> . ADD_ASSIGN
    (53) assignment_operator -> . SUB_ASSIGN
    (54) assignment_operator -> . LEFT_ASSIGN
    (55) assignment_operator -> . RIGHT_ASSIGN
    (56) assignment_operator -> . AND_ASSIGN
    (57) assignment_operator -> . XOR_ASSIGN
    (58) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 15 (cast_expression -> unary_expression .)
    /               reduce using rule 15 (cast_expression -> unary_expression .)
    %               reduce using rule 15 (cast_expression -> unary_expression .)
    +               reduce using rule 15 (cast_expression -> unary_expression .)
    -               reduce using rule 15 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 15 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 15 (cast_expression -> unary_expression .)
    <               reduce using rule 15 (cast_expression -> unary_expression .)
    >               reduce using rule 15 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    &               reduce using rule 15 (cast_expression -> unary_expression .)
    ^               reduce using rule 15 (cast_expression -> unary_expression .)
    |               reduce using rule 15 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 15 (cast_expression -> unary_expression .)
    ?               reduce using rule 15 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 15 (cast_expression -> unary_expression .)
    )               reduce using rule 15 (cast_expression -> unary_expression .)
    ,               reduce using rule 15 (cast_expression -> unary_expression .)
    :               reduce using rule 15 (cast_expression -> unary_expression .)
    =               shift and go to state 64
    MUL_ASSIGN      shift and go to state 61
    DIV_ASSIGN      shift and go to state 62
    MOD_ASSIGN      shift and go to state 57
    ADD_ASSIGN      shift and go to state 65
    SUB_ASSIGN      shift and go to state 56
    LEFT_ASSIGN     shift and go to state 63
    RIGHT_ASSIGN    shift and go to state 66
    AND_ASSIGN      shift and go to state 60
    XOR_ASSIGN      shift and go to state 58
    OR_ASSIGN       shift and go to state 59


    assignment_operator            shift and go to state 67

state 32

    (59) expression -> assignment_expression .

    :               reduce using rule 59 (expression -> assignment_expression .)
    ,               reduce using rule 59 (expression -> assignment_expression .)
    )               reduce using rule 59 (expression -> assignment_expression .)



state 33

    (46) assignment_expression -> conditional_expression .

    )               reduce using rule 46 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 46 (assignment_expression -> conditional_expression .)
    :               reduce using rule 46 (assignment_expression -> conditional_expression .)



state 34

    (6) primary_expression -> ( expression . )
    (60) expression -> expression . , assignment_expression

    )               shift and go to state 68
    ,               shift and go to state 69



state 35

    (29) relational_expression -> relational_expression LE_OP . shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 70
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 36

    (27) relational_expression -> relational_expression < . shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 71
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 37

    (30) relational_expression -> relational_expression GE_OP . shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 72
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 38

    (28) relational_expression -> relational_expression > . shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 39

    (10) unary_expression -> unary_operator cast_expression .

    *               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    =               reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 10 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 10 (unary_expression -> unary_operator cast_expression .)



state 40

    (17) multiplicative_expression -> multiplicative_expression * . cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 17
    cast_expression                shift and go to state 74
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12

state 41

    (19) multiplicative_expression -> multiplicative_expression % . cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 17
    cast_expression                shift and go to state 75
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12

state 42

    (18) multiplicative_expression -> multiplicative_expression / . cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 17
    cast_expression                shift and go to state 76
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12

state 43

    (21) additive_expression -> additive_expression + . multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 77
    postfix_expression             shift and go to state 23
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 44

    (22) additive_expression -> additive_expression - . multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 78
    postfix_expression             shift and go to state 23
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 45

    (7) primary_expression -> LPAREN expression . )
    (60) expression -> expression . , assignment_expression

    )               shift and go to state 79
    ,               shift and go to state 69



state 46

    (41) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 80
    exclusive_or_expression        shift and go to state 3
    postfix_expression             shift and go to state 23
    additive_expression            shift and go to state 16
    and_expression                 shift and go to state 4
    primary_expression             shift and go to state 17
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    equality_expression            shift and go to state 21
    relational_expression          shift and go to state 10

state 47

    (24) shift_expression -> shift_expression LEFT_OP . additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    additive_expression            shift and go to state 81
    primary_expression             shift and go to state 17

state 48

    (25) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    additive_expression            shift and go to state 82
    primary_expression             shift and go to state 17

state 49

    (33) equality_expression -> equality_expression NE_OP . relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    relational_expression          shift and go to state 83
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 50

    (32) equality_expression -> equality_expression EQ_OP . relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    postfix_expression             shift and go to state 23
    relational_expression          shift and go to state 84
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    identifier                     shift and go to state 26
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    primary_expression             shift and go to state 17

state 51

    (43) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    and_expression                 shift and go to state 4
    primary_expression             shift and go to state 17
    unary_operator                 shift and go to state 12
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 85
    identifier                     shift and go to state 26
    equality_expression            shift and go to state 21
    relational_expression          shift and go to state 10

state 52

    (45) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression , assignment_expression
    (46) assignment_expression -> . conditional_expression
    (47) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    relational_expression          shift and go to state 10
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 32
    unary_expression               shift and go to state 31
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    additive_expression            shift and go to state 16
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    and_expression                 shift and go to state 4
    equality_expression            shift and go to state 21
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    identifier                     shift and go to state 26
    expression                     shift and go to state 86
    logical_or_expression          shift and go to state 24
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 53

    (37) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (35) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    $end            reduce using rule 37 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 29



state 54

    (35) and_expression -> and_expression & equality_expression .
    (32) equality_expression -> equality_expression . EQ_OP relational_expression
    (33) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    $end            reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 35 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 50
    NE_OP           shift and go to state 49



state 55

    (39) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (37) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    $end            reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 39 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 28



state 56

    (53) assignment_operator -> SUB_ASSIGN .

    +               reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    PP_NUMBER       reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> SUB_ASSIGN .)



state 57

    (51) assignment_operator -> MOD_ASSIGN .

    +               reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    PP_NUMBER       reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 51 (assignment_operator -> MOD_ASSIGN .)



state 58

    (57) assignment_operator -> XOR_ASSIGN .

    +               reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    PP_NUMBER       reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> XOR_ASSIGN .)



state 59

    (58) assignment_operator -> OR_ASSIGN .

    +               reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    PP_NUMBER       reduce using rule 58 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 58 (assignment_operator -> OR_ASSIGN .)



state 60

    (56) assignment_operator -> AND_ASSIGN .

    +               reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    PP_NUMBER       reduce using rule 56 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> AND_ASSIGN .)



state 61

    (49) assignment_operator -> MUL_ASSIGN .

    +               reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    PP_NUMBER       reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 49 (assignment_operator -> MUL_ASSIGN .)



state 62

    (50) assignment_operator -> DIV_ASSIGN .

    +               reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    PP_NUMBER       reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 50 (assignment_operator -> DIV_ASSIGN .)



state 63

    (54) assignment_operator -> LEFT_ASSIGN .

    +               reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    PP_NUMBER       reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> LEFT_ASSIGN .)



state 64

    (48) assignment_operator -> = .

    +               reduce using rule 48 (assignment_operator -> = .)
    -               reduce using rule 48 (assignment_operator -> = .)
    ~               reduce using rule 48 (assignment_operator -> = .)
    !               reduce using rule 48 (assignment_operator -> = .)
    (               reduce using rule 48 (assignment_operator -> = .)
    LPAREN          reduce using rule 48 (assignment_operator -> = .)
    PP_NUMBER       reduce using rule 48 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 48 (assignment_operator -> = .)



state 65

    (52) assignment_operator -> ADD_ASSIGN .

    +               reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    PP_NUMBER       reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 52 (assignment_operator -> ADD_ASSIGN .)



state 66

    (55) assignment_operator -> RIGHT_ASSIGN .

    +               reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    PP_NUMBER       reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> RIGHT_ASSIGN .)



state 67

    (47) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (46) assignment_expression -> . conditional_expression
    (47) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    relational_expression          shift and go to state 10
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 87
    unary_expression               shift and go to state 31
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    additive_expression            shift and go to state 16
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    and_expression                 shift and go to state 4
    equality_expression            shift and go to state 21
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    identifier                     shift and go to state 26
    logical_or_expression          shift and go to state 24
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 68

    (6) primary_expression -> ( expression ) .

    *               reduce using rule 6 (primary_expression -> ( expression ) .)
    /               reduce using rule 6 (primary_expression -> ( expression ) .)
    %               reduce using rule 6 (primary_expression -> ( expression ) .)
    +               reduce using rule 6 (primary_expression -> ( expression ) .)
    -               reduce using rule 6 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 6 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> ( expression ) .)
    <               reduce using rule 6 (primary_expression -> ( expression ) .)
    >               reduce using rule 6 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    &               reduce using rule 6 (primary_expression -> ( expression ) .)
    ^               reduce using rule 6 (primary_expression -> ( expression ) .)
    |               reduce using rule 6 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    ?               reduce using rule 6 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    $end            reduce using rule 6 (primary_expression -> ( expression ) .)
    )               reduce using rule 6 (primary_expression -> ( expression ) .)
    ,               reduce using rule 6 (primary_expression -> ( expression ) .)
    :               reduce using rule 6 (primary_expression -> ( expression ) .)
    =               reduce using rule 6 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)



state 69

    (60) expression -> expression , . assignment_expression
    (46) assignment_expression -> . conditional_expression
    (47) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    relational_expression          shift and go to state 10
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 88
    unary_expression               shift and go to state 31
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    additive_expression            shift and go to state 16
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    and_expression                 shift and go to state 4
    equality_expression            shift and go to state 21
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    identifier                     shift and go to state 26
    logical_or_expression          shift and go to state 24
    unary_operator                 shift and go to state 12
    primary_expression             shift and go to state 17

state 70

    (29) relational_expression -> relational_expression LE_OP shift_expression .
    (24) shift_expression -> shift_expression . LEFT_OP additive_expression
    (25) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    $end            reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 29 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 47
    RIGHT_OP        shift and go to state 48



state 71

    (27) relational_expression -> relational_expression < shift_expression .
    (24) shift_expression -> shift_expression . LEFT_OP additive_expression
    (25) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    $end            reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 27 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 47
    RIGHT_OP        shift and go to state 48



state 72

    (30) relational_expression -> relational_expression GE_OP shift_expression .
    (24) shift_expression -> shift_expression . LEFT_OP additive_expression
    (25) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    $end            reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 30 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 47
    RIGHT_OP        shift and go to state 48



state 73

    (28) relational_expression -> relational_expression > shift_expression .
    (24) shift_expression -> shift_expression . LEFT_OP additive_expression
    (25) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    $end            reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 28 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 47
    RIGHT_OP        shift and go to state 48



state 74

    (17) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    $end            reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 17 (multiplicative_expression -> multiplicative_expression * cast_expression .)



state 75

    (19) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    $end            reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % cast_expression .)



state 76

    (18) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    $end            reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)



state 77

    (21) additive_expression -> additive_expression + multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . * cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    $end            reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 21 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 40
    /               shift and go to state 42
    %               shift and go to state 41



state 78

    (22) additive_expression -> additive_expression - multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . * cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    $end            reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 22 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 40
    /               shift and go to state 42
    %               shift and go to state 41



state 79

    (7) primary_expression -> LPAREN expression ) .

    *               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    /               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    %               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    +               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    -               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    LEFT_OP         reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    <               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    >               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    LE_OP           reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    GE_OP           reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    EQ_OP           reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    NE_OP           reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    &               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    ^               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    |               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    AND_OP          reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    ?               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    OR_OP           reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    $end            reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    )               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    ,               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    :               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    =               reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> LPAREN expression ) .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> LPAREN expression ) .)



state 80

    (41) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (39) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    $end            reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 41 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 30



state 81

    (24) shift_expression -> shift_expression LEFT_OP additive_expression .
    (21) additive_expression -> additive_expression . + multiplicative_expression
    (22) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    $end            reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 24 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 43
    -               shift and go to state 44



state 82

    (25) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (21) additive_expression -> additive_expression . + multiplicative_expression
    (22) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    $end            reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 25 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 43
    -               shift and go to state 44



state 83

    (33) equality_expression -> equality_expression NE_OP relational_expression .
    (27) relational_expression -> relational_expression . < shift_expression
    (28) relational_expression -> relational_expression . > shift_expression
    (29) relational_expression -> relational_expression . LE_OP shift_expression
    (30) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    $end            reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 33 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 36
    >               shift and go to state 38
    LE_OP           shift and go to state 35
    GE_OP           shift and go to state 37



state 84

    (32) equality_expression -> equality_expression EQ_OP relational_expression .
    (27) relational_expression -> relational_expression . < shift_expression
    (28) relational_expression -> relational_expression . > shift_expression
    (29) relational_expression -> relational_expression . LE_OP shift_expression
    (30) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    $end            reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 32 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 36
    >               shift and go to state 38
    LE_OP           shift and go to state 35
    GE_OP           shift and go to state 37



state 85

    (43) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (41) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    $end            reduce using rule 43 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 46



state 86

    (45) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (60) expression -> expression . , assignment_expression

    :               shift and go to state 89
    ,               shift and go to state 69



state 87

    (47) assignment_expression -> unary_expression assignment_operator assignment_expression .

    )               reduce using rule 47 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 47 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 47 (assignment_expression -> unary_expression assignment_operator assignment_expression .)



state 88

    (60) expression -> expression , assignment_expression .

    :               reduce using rule 60 (expression -> expression , assignment_expression .)
    ,               reduce using rule 60 (expression -> expression , assignment_expression .)
    )               reduce using rule 60 (expression -> expression , assignment_expression .)



state 89

    (45) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (44) conditional_expression -> . logical_or_expression
    (45) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (40) logical_and_expression -> . inclusive_or_expression
    (41) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (38) inclusive_or_expression -> . exclusive_or_expression
    (39) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (36) exclusive_or_expression -> . and_expression
    (37) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (34) and_expression -> . equality_expression
    (35) and_expression -> . and_expression & equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ_OP relational_expression
    (33) equality_expression -> . equality_expression NE_OP relational_expression
    (26) relational_expression -> . shift_expression
    (27) relational_expression -> . relational_expression < shift_expression
    (28) relational_expression -> . relational_expression > shift_expression
    (29) relational_expression -> . relational_expression LE_OP shift_expression
    (30) relational_expression -> . relational_expression GE_OP shift_expression
    (23) shift_expression -> . additive_expression
    (24) shift_expression -> . shift_expression LEFT_OP additive_expression
    (25) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (20) additive_expression -> . multiplicative_expression
    (21) additive_expression -> . additive_expression + multiplicative_expression
    (22) additive_expression -> . additive_expression - multiplicative_expression
    (16) multiplicative_expression -> . cast_expression
    (17) multiplicative_expression -> . multiplicative_expression * cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression % cast_expression
    (15) cast_expression -> . unary_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (11) unary_operator -> . +
    (12) unary_operator -> . -
    (13) unary_operator -> . ~
    (14) unary_operator -> . !
    (4) primary_expression -> . constant
    (5) primary_expression -> . identifier
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . LPAREN expression )
    (2) constant -> . PP_NUMBER
    (3) identifier -> . IDENTIFIER

    +               shift and go to state 8
    -               shift and go to state 9
    ~               shift and go to state 27
    !               shift and go to state 5
    (               shift and go to state 7
    LPAREN          shift and go to state 18
    PP_NUMBER       shift and go to state 11
    IDENTIFIER      shift and go to state 22


    identifier                     shift and go to state 26
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    multiplicative_expression      shift and go to state 15
    inclusive_or_expression        shift and go to state 6
    exclusive_or_expression        shift and go to state 3
    postfix_expression             shift and go to state 23
    shift_expression               shift and go to state 20
    additive_expression            shift and go to state 16
    equality_expression            shift and go to state 21
    unary_operator                 shift and go to state 12
    conditional_expression         shift and go to state 90
    cast_expression                shift and go to state 13
    logical_and_expression         shift and go to state 19
    primary_expression             shift and go to state 17
    logical_or_expression          shift and go to state 24
    and_expression                 shift and go to state 4
    relational_expression          shift and go to state 10

state 90

    (45) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    $end            reduce using rule 45 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 45 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 45 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 45 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


